@import "syntax";

code, tt {
  margin: 0 2px;
  padding: 0 5px;
  white-space: nowrap;
  background-color: color('black');
  font-weight: normal;
}

pre code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

.highlight pre {
  overflow: auto;
}

pre {
	background: color('black');
  overflow: auto;
	padding: 2em 3.2rem;
}
pre code, pre tt {
  background-color: transparent;
  border: none;
}

code[class*="language-"],
pre[class*="language-"] {
	color: color('white');
	background: none;
	font-family: 'Source Code Pro', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
	overflow: auto;
	//border-radius: 0.3em;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	background: color('black');
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	padding: .1em;
	//border-radius: .3em;
	white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
	color: $syn_comment;
}

.token.punctuation {
	color: $syn_punct;
}

.namespace {
	opacity: .7;
}

.token.property,
.token.tag,
.token.constant,
.token.symbol,
.token.deleted {
	color: $syn_symbol;
}

.token.boolean,
.token.number {
	color: $syn_num;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
	color: $syn_char;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string,
.token.variable {
	color: $syn_var;
}

.token.atrule,
.token.attr-value,
.token.function {
	color: $syn_def;
}

.token.keyword {
	color: $syn_keyword;
}

.token.regex,
.token.important {
	color: $syn_regex;
}

.token.important,
.token.bold {
	font-weight: bold;
}
.token.italic {
	font-style: italic;
}

.token.entity {
	cursor: help;
}

.token {
  &.delimiter {
    color: $syn_delim;
  }
  &.this {
    color: $syn_this;
  }

  &.property {
    color: $syn_property;
  }

  &.operator {
    color: $syn_operator;
  }
  &.function {
    color: $syn_func;
  }
  &.class-name {
    color: $syn_classname;
  }
}
